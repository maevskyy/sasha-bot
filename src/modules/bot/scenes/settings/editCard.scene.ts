import { Composer, Scenes } from "telegraf";
import { EBotScenes, IMyContext } from "../../types";
import { getCardsByUserId, updateCard } from "../../../db";
import { createKeyboard, createMessageKeyboard } from "../../common/keyboards";
import { message } from "telegraf/filters";
import { formatCards } from "../../common/helpers";

const mainStep = new Composer<IMyContext>();
const editNameStep = new Composer<IMyContext>();
const editCardNumberStep = new Composer<IMyContext>();
const editBankStep = new Composer<IMyContext>();
const editBalanceStep = new Composer<IMyContext>();

mainStep.action(/^edit_card_\d+_(.+)$/, async (ctx) => {
  const cardName = ctx.match[1];
  const userId = ctx.chat?.id ?? 0;
  const cards = await getCardsByUserId(userId);
  const selectedCard = cards?.find((card) => card.name === cardName);
  if (!selectedCard) {
    await ctx.reply("–ü–æ–º–∏–ª–∫–∞: –∫–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚ùå");
    return ctx.scene.leave();
  }

  ctx.session.newCard = {
    name: selectedCard.name,
    bank: selectedCard.bank ?? "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
    balance: selectedCard.balance,
    card: selectedCard.card_number ?? "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
  };
  const keyboard = createKeyboard([
    ["–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É", "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏"],
    ["–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±–∞–Ω–∫", "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±–∞–ª–∞–Ω—Å"],
    ["–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏ ‚úÖ", "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è üõë"],
  ]);

  return ctx.reply(
    `–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏: ${selectedCard.name}\n–í–∏–±–µ—Ä—ñ—Ç—å, —â–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:`,
    keyboard
  );
});

mainStep.hears("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è üõë", async (ctx) => {
  await ctx.reply("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.");
  await ctx.scene.leave();
  return ctx.scene.enter(EBotScenes.SETTINGS);
});

mainStep.hears("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É", async (ctx) => {
  ctx.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –∫–∞—Ä—Ç–∫–∏:");
  return ctx.wizard.next();
});
editNameStep.on(message("text"), async (ctx) => {
  ctx.session.newCard.name = ctx.message.text;
  ctx.reply(`–ù–∞–∑–≤–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞: ${ctx.session.newCard.name}`);
  return ctx.wizard.selectStep(0);
});

mainStep.hears("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏", async (ctx) => {
  ctx.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏:");
  return ctx.wizard.selectStep(2);
});
editCardNumberStep.on(message("text"), async (ctx) => {
  ctx.session.newCard.card = ctx.message.text;
  ctx.reply(`–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${ctx.session.newCard.card}`);
  return ctx.wizard.selectStep(0);
});

mainStep.hears("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±–∞–Ω–∫", async (ctx) => {
  ctx.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –±–∞–Ω–∫—É:");
  return ctx.wizard.selectStep(3);
});
editBankStep.on(message("text"), async (ctx) => {
  ctx.session.newCard.bank = ctx.message.text;
  ctx.reply(`–ë–∞–Ω–∫ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${ctx.session.newCard.bank}`);
  return ctx.wizard.selectStep(0);
});

mainStep.hears("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –±–∞–ª–∞–Ω—Å", async (ctx) => {
  ctx.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å (—Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏):");
  return ctx.wizard.selectStep(4);
});
editBalanceStep.on(message("text"), async (ctx) => {
  const balance = ctx.message.text;
  if (!/^\d+$/.test(balance)) {
    ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å—É.");
    return;
  }
  ctx.session.newCard.balance = balance;
  ctx.reply(`–ë–∞–ª–∞–Ω—Å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: ${ctx.session.newCard.balance}`);
  return ctx.wizard.selectStep(0);
});

mainStep.hears("–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏ ‚úÖ", async (ctx) => {
  const { name, balance, bank, card } = ctx.session.newCard;
  const isUpdated = await updateCard({
    user_id: ctx.chat.id ?? 0,
    card_number: card,
    name,
    balance,
    bank,
  });
  const text = isUpdated
    ? "–ó–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úÖ"
    : "–ù–µ –≤–¥–∞–ª–æ—Å—å –≤–Ω–µ—Å—Ç–∏ –∑–º—ñ–Ω–∏ ";
  await ctx.reply(text);
  await ctx.scene.leave();
  return ctx.scene.enter(EBotScenes.SETTINGS);
});

// ============ REGISTER_SCENE ============
const editCardScene = new Scenes.WizardScene<IMyContext>(
  EBotScenes.EDITCARD,
  mainStep,
  editNameStep,
  editCardNumberStep,
  editBankStep,
  editBalanceStep
);

editCardScene.enter(async (ctx) => {
  let text = "–£ –≤–∞—Å –ø–æ–∫–∏ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç";
  const cards = await getCardsByUserId(ctx.chat?.id ?? 0);

  if (cards) text = formatCards(cards);
  if (!cards) return ctx.reply(text);

  ctx.session.newCard = { name: "", bank: "", balance: "", card: "" };

  const buttons = cards.map((card, index) => ({
    text: card.name,
    callback_data: `edit_card_${index}_${card.name}`,
  }));
  await ctx.reply(
    "–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ä—Ç–∫—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è",
    createKeyboard([["–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ üõë"]])
  );
  return ctx.reply(text, createMessageKeyboard(buttons));
});

editCardScene.hears("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ üõë", async (ctx) => {
  await ctx.scene.leave();
  return ctx.scene.enter(EBotScenes.SETTINGS);
});

export { editCardScene };

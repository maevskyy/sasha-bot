import { Composer, Scenes } from "telegraf";
import { EBotScenes, IMyContext } from "../../types";
import { createKeyboard, createMessageKeyboard } from "../../common/keyboards";
import { message } from "telegraf/filters";
import { getCardsByUserId, updateCard, createTransaction } from "../../../db";
import { formatCardsForDelete } from "../../common/helpers";
import { IDBCard } from "../../../../common";

// –ø–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –≤—ã–±—Ä–∞—Ç—å —Å –∫–∞–∫–æ–π –∫–∞—Ä—Ç—ã
// –≤—Ç–æ—Ä—ã–º –¥–µ–ª–∞—Ç—å –≤–Ω–µ—Å—Ç–∏ –∫–∞—Ä—Ç—É –∫—É–¥–∞
// –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

const writeARecieverStep = new Composer<IMyContext>();
writeARecieverStep.on(message("text"), async (ctx) => {
  const userInput = ctx.message?.text ?? "";
  ctx.session.newTransaction.recieverCard = userInput;

  let text: string = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç";
  const cards = await getCardsByUserId(ctx.chat?.id ?? 0);
  if (cards) text = formatCardsForDelete(cards);
  if (!cards) return ctx.reply(text);
  const buttons = cards.map((card, index) => ({
    text: card.name,
    callback_data: `choose_card_${index}_${card.name}`,
  }));

  const keyboard = createMessageKeyboard(buttons);
  await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –∑ —è–∫–æ—ó –∫–∞—Ä—Ç–∫–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–∞–Ω–Ω—è");
  await ctx.reply(text, keyboard);
  return ctx.wizard.next();
});

const writeASenderStep = new Composer<IMyContext>();
writeASenderStep.action(/^choose_card_\d+_(.+)$/, async (ctx) => {
  ctx.answerCbQuery();

  const userId = ctx.chat?.id ?? 0;
  const cardName = ctx.match[1];
  const cards = await getCardsByUserId(userId);
  if (!cards) return ctx.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç");
  const isUserHasCard = cards.map((card) => card.name).includes(cardName);
  if (!isUserHasCard) return ctx.reply("–£ –≤–∞—Å –Ω–µ–º–∞—î —Ç–∞–∫–æ—ó –∫–∞—Ä—Ç–∫–∏");

  ctx.session.newTransaction.originCard = cards.find(
    (card) => card.name === cardName
  ) as IDBCard;
  await ctx.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");
  return ctx.wizard.next();
});
writeASenderStep.on(message("text"), async (ctx) => {
  await ctx.reply("–í–≤–µ–¥—ñ—Ç—å —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó");
  return ctx.wizard.next();
});

const writeAAmountStep = new Composer<IMyContext>();
writeAAmountStep.on(message("text"), async (ctx) => {
  const userInput = ctx.message?.text ?? "";

  const isValidNumber = /^\d+$/.test(userInput);
  if (!isValidNumber) {
    await ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ –¥–ª—è —Å—É–º–∏.");
    return ctx.wizard.back();
  }

  const amount = Number(userInput);

  if (amount <= 0) {
    await ctx.reply("–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0.");
    return ctx.wizard.back();
  }

  const { recieverCard, originCard } = ctx.session.newTransaction;

  const currentBalance = Number(originCard.balance);

  if (amount > currentBalance) {
    await ctx.reply(
      `–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –∫–∞—Ä—Ç—Ü—ñ. –î–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance}.`
    );
    return ctx.wizard.back();
  }

  ctx.session.newTransaction.originCard.balance = String(
    currentBalance - amount
  );

  let text: string = "–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–∞–ø–∏—Å–∞–Ω–∞";
  const updatedCard = await updateCard(ctx.session.newTransaction.originCard);
  if (!updatedCard) text = "–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É";
  const createdTransaction = await createTransaction({
    user_id: ctx.chat.id,
    card_id: originCard.id as number,
    amount: String(amount),
    post_balance: String(currentBalance - amount),
    reciever_card: recieverCard,
  });
  if (!createdTransaction)
    text = "–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–∞, –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ç—Ä–∞–Ω–∞–∫—Ü—ñ—é";

  await ctx.reply(text);
  await ctx.scene.leave();
  return ctx.scene.enter(EBotScenes.TRANSACTIONS);
});

// ============ REGISTER_SCENE ============
const addTransactionScene = new Scenes.WizardScene<IMyContext>(
  EBotScenes.ADDTRANSACTION,
  writeARecieverStep,
  writeASenderStep,
  writeAAmountStep
);

addTransactionScene.enter(async (ctx) => {
  if (!ctx.session.newTransaction) {
    ctx.session.newTransaction = {
      amount: "",
      postBalance: "",
      originCard: {
        name: "",
        user_id: 0,
        card_number: "",
        balance: "",
        bank: "",
      },
      recieverCard: "",
    };
  }
  const text = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞";
  const keyboard = createKeyboard([["–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó üõë"]]);
  await ctx.reply(text, keyboard);
});

addTransactionScene.hears("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó üõë", async (ctx) => {
  await ctx.scene.leave();
  return ctx.scene.enter(EBotScenes.TRANSACTIONS);
});

export { addTransactionScene };

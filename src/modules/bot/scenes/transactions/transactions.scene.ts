import { Composer, Scenes } from "telegraf";
import { EBotScenes, IMyContext } from "../../types";
import { createKeyboard } from "../../common/keyboards";
import { message } from "telegraf/filters";

const transactionComposer = new Composer<IMyContext>();
transactionComposer.hears("–î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é ‚ûï", async (ctx) => {
  return ctx.scene.enter(EBotScenes.ADDTRANSACTION);
});
transactionComposer.hears("–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é üóë", async (ctx) => {
  return ctx.scene.enter(EBotScenes.DELETETRANSACTION);
});
transactionComposer.hears("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é ‚úè", (ctx) => {
  return ctx.scene.enter(EBotScenes.EDITTRANSACTION);
});
transactionComposer.hears("–í –º–µ–Ω—é ‚¨Ö", (ctx) => {
  ctx.scene.enter(EBotScenes.MENU);
});
transactionComposer.on(message("text"), async (ctx) => {
  return ctx.reply("–ù–µ —Ä–æ–∑—É–º—ñ—é");
});

const transactionsScene = new Scenes.WizardScene<IMyContext>(
  EBotScenes.TRANSACTIONS,
  transactionComposer
);

transactionsScene.enter(async (ctx) => {
  const text: string = "–í–∏ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è—Ö";
  const myKeyboard = createKeyboard([
    ["–î–æ–¥–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é ‚ûï", "–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é ‚úè"],
    ["–í–∏–¥–∞–ª–∏—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é üóë", "–í –º–µ–Ω—é ‚¨Ö"],
  ]);
  ctx.reply(text, myKeyboard);
});

export { transactionsScene };
